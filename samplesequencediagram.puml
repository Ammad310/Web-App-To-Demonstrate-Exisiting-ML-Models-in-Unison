@startuml
actor User

participant "FrontEnd" as FE
participant "FlaskApp" as Flask
participant "Patient" as Patient
participant "ChronicPredictor" as ChronicPredictor
participant "DatabaseHandler" as Database
participant "API" as API

User -> FE: Patient ID and Practice
activate FE
FE-> Flask: POST / (Patient ID, Practice)

activate Flask

Flask -> Database: get_patients_from_mongo(patient_ID, patient_practice)
activate Database
Database --> Flask: return patient_data
deactivate Database


alt Patient data is valid
   Flask -> Patient: clean_data(keys)
   activate Patient
   deactivate Patient
else Patient data is invalid
    Flask --> FE: Return error message (Patient ID or Practice is Incorrect)
end
deactivate Flask

FE -> Flask: GET /diagnose
activate Flask
Flask -> API: Post patient data to API_URL
activate API
API --> Flask: Return diagnosis data
deactivate API
alt API Response is valid
    Flask -> Patient: assign_patient_data(response.json())
    activate Patient
    deactivate Patient
else API response is invalid
    Flask --> FE: Return error message (server failed to respond, try again later)
end
Patient -> ChronicPredictor: set_values(chronic_diseases_response)
activate ChronicPredictor
deactivate ChronicPredictor
Flask --> FE: Render diagnose.html with patient data
deactivate Flask

FE -> Flask: GET /chronic
activate Flask
Flask -> Patient: get_chronic_pred()
activate Patient
Patient -> ChronicPredictor: get_pred_data()
activate ChronicPredictor 
ChronicPredictor --> Patient: return chronic_prediction_data
deactivate ChronicPredictor
Patient --> Flask: return chronic_prediction_data
deactivate Patient
Flask --> FE: Render chronic_disease.html with chronic prediction data
deactivate Flask

deactivate Flask
deactivate FE
@enduml
